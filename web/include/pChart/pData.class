<?php
/*
	pData - Simplifying data population for pChart
	Copyright (C) 2008 Jean-Damien POGOLOTTI
	Version  1.13 last updated on 08/17/08

	http://pchart.sourceforge.net

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation,  either version 1, 2, 3 of the License,  or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful, 
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not,  see <http://www.gnu.org/licenses/>.

	Class initialisation :
	pData()
	Data populating methods :
	ImportFromCSV($FileName, $Delimiter=", ", $DataColumns=-1, $HasHeader=FALSE, $DataName=-1)
	AddPoint($val, $Series="Series1", $Description="")
	Seriess manipulation methods :
	AddSeries($SeriesName="Series1")
	AddAllSeriess()
	RemoveSeries($SeriesName="Series1")
	SetAbsciseLabelSeries($SeriesName = "Name")
	SetSeriesName($Name, $SeriesName="Series1")
+   SetSeriesSymbol($Name, $Symbol)
	SetXAxisName($Name="X Axis")
	SetYAxisName($Name="Y Axis")
	SetXAxisFormat($Format="number")
	SetYAxisFormat($Format="number")
	SetXAxisUnit($Unit="")
	SetYAxisUnit($Unit="")
	removeSeriesName($SeriesName)
	removeAllSeriess()
	Data retrieval methods :
	GetData()
	GetDataDescription()
*/

/* pData class definition */
class pData
{
	var $Data;
	var $DataDescription;

	function pData()
	{
		$this->Data                           = "";
		$this->DataDescription                = "";
		$this->DataDescription["Position"]    = "Name";
		$this->DataDescription["Format"]["X"] = "number";
		$this->DataDescription["Format"]["Y"] = "number";
		$this->DataDescription["Unit"]["X"]   = NULL;
		$this->DataDescription["Unit"]["Y"]   = NULL;
	}

	function ImportFromCSV($FileName, $Delimiter=", ", $DataColumns=-1, $HasHeader=FALSE, $DataName=-1)
	{
		$handle = @fopen($FileName, "r");
		if ($handle)
		{
			$HeaderParsed = FALSE;

			while (!feof($handle))
			{
				$buffer = fgets($handle,  4096);
				$buffer = str_replace(chr(10), "", $buffer);
				$buffer = str_replace(chr(13), "", $buffer);
				$vals = split($Delimiter, $buffer);

				if ( $buffer != "" )
				{
					if ( $HasHeader == TRUE && $HeaderParsed == FALSE )
					{
						if ( $DataColumns == -1 )
						{
							$ID = 1;
							foreach($vals as $key => $val)
							{
								$this->SetSeriesName($val, "Series".$ID);
								$ID++;
							}
						}
						else
						{
							$SeriesName = "";

							foreach($DataColumns as $key => $val)
							{
								$this->SetSeriesName($vals[$val], "Series".$val);
							}
						}

						$HeaderParsed = TRUE;
					}
					else
					{
						if ( $DataColumns == -1 )
						{
							$ID = 1;
							foreach($vals as $key => $val)
							{
								$this->AddPoint(intval($val), "Series".$ID);
								$ID++;
							}
						}
						else
						{
							$SeriesName = "";
							if ( $DataName != -1 )
								$SeriesName = $vals[$DataName];

							foreach($DataColumns as $key => $val)
							{
								$this->AddPoint($vals[$val], "Series".$val, $SeriesName);
							}
						}
					}
				}
			}
			fclose($handle);
		}
	}

	function AddPoint($val, $Series="Series1", $Description="")
	{
		if (is_array($val) && count($val) == 1)
			$val = $val[0];

		$ID = 0;
		for($i = 0; $i <= count($this->Data); $i++)
		{
			if(isset($this->Data[$i][$Series]))
			{
				$ID = $i+1;
			}
		}

		if ( count($val) == 1 )
		{
			$this->Data[$ID][$Series] = $val;
			if ( $Description != "" )
			{
				$this->Data[$ID]["Name"] = $Description;
			}
			elseif (!isset($this->Data[$ID]["Name"]))
			{
				$this->Data[$ID]["Name"] = $ID;
			}
		}
		else
		{
			foreach($val as $key => $val)
			{
				$this->Data[$ID][$Series] = $val;

				if (!isset($this->Data[$ID]["Name"]))
					$this->Data[$ID]["Name"] = $ID;

				$ID++;
			}
		}
	}

	function AddSeries($SeriesName="Series1")
	{
		if ( !isset($this->DataDescription["Values"]) )
		{
			$this->DataDescription["Values"][] = $SeriesName;
		}
		else
		{
			$Found = FALSE;
			foreach($this->DataDescription["Values"] as $key => $val )
			{
				if ( $val == $SeriesName )
				{
					$Found = TRUE;
				}
			}

			if ( !$Found )
			{
				$this->DataDescription["Values"][] = $SeriesName;
			}
		}
	}

	function AddAllSeriess()
	{
		unset($this->DataDescription["Values"]);

		if ( isset($this->Data[0]) )
		{
			foreach($this->Data[0] as $Key => $val)
			{
				if ( $Key != "Name" )
					$this->DataDescription["Values"][] = $Key;
			}
		}
	}

	function RemoveSeries($SeriesName="Series1")
	{
		if ( !isset($this->DataDescription["Values"]) )
			return(0);

		$Found = FALSE;
		foreach($this->DataDescription["Values"] as $key => $val )
		{
			if ( $val == $SeriesName )
				unset($this->DataDescription["Values"][$key]);
		}
	}

	function SetAbsciseLabelSeries($SeriesName = "Name")
	{
		$this->DataDescription["Position"] = $SeriesName;
	}

	function SetSeriesName($Name, $SeriesName="Series1")
	{
		$this->DataDescription["Description"][$SeriesName] = $Name;
	}

	function SetXAxisName($Name="X Axis")
	{
		$this->DataDescription["Axis"]["X"] = $Name;
	}

	function SetYAxisName($Name="Y Axis")
	{
		$this->DataDescription["Axis"]["Y"] = $Name;
	}

	function SetXAxisFormat($Format="number")
	{
		$this->DataDescription["Format"]["X"] = $Format;
	}

	function SetYAxisFormat($Format="number")
	{
		$this->DataDescription["Format"]["Y"] = $Format;
	}

	function SetXAxisUnit($Unit="")
	{
		$this->DataDescription["Unit"]["X"] = $Unit;
	}

	function SetYAxisUnit($Unit="")
	{
		$this->DataDescription["Unit"]["Y"] = $Unit;
	}

	function SetSeriesSymbol($Name, $Symbol)
	{
		$this->DataDescription["Symbol"][$Name] = $Symbol;
	}

	function removeSeriesName($SeriesName)
	{
		if ( isset($this->DataDescription["Description"][$SeriesName]) )
			unset($this->DataDescription["Description"][$SeriesName]);
	}

	function removeAllSeriess()
	{
		foreach($this->DataDescription["Values"] as $Key => $val)
			unset($this->DataDescription["Values"][$Key]);
	}

	function GetData()
	{
		return($this->Data);
	}

	function GetDataDescription()
	{
		return($this->DataDescription);
	}
}
?>